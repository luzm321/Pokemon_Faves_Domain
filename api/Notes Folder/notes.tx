readme file: can write instructions about app and will display in github

gitignore: allows you ignore certain files/folders you don't wanna push to github:
for example: need to just put the names of the files/folders and go down in order of folders to ignore (see gitignore file for reference)

eslint is a tool that has rules and will either warn you or throw an error if not abiding by rules and for example double quotes and semi colon missing.

api: is a container that holds data that you can fetch through an api call using javascript

database.json (json file) only accepts objects.

Public Folder: has main.html and for organization .css and .js etc.

bundle.js (created when you run server for the first time): has all code complied, DON'T TOUCH!

src is for organization: for scripts folder (has js files for pages)

library folder has 2 folders and 3 files (grunt and package.json once npm installed):
grunt config (grunt needs gruntfile.js to run)

package.json has everything that you install npm packages (node package managers: make life easier and allows you to use others' functions or methods)
to make coding easier. package.json tells what packages to install to allow server to run.

Node modules has a lot of things in it don't modify and is needed.k

grunt needs aliases.yaml, bgShell.js (launches command of json server and gives port you want, default is 8088)

browserify.js allows you to do modularity and need to put source js file and compilation

___________________________________________________________________________________________________________________________________________-

cd means command when typed on terminal. To get into the folder: type cd src, then cd lib for example and to get out type cd.. in terminal
when adding and and commiting and pushing after saving changes, make sure you save and do it at the Json-ServerAndGruntBoilerPlate folder. To get out
of 2 folders at a time, you type cd../.. in terminal

To close the server so that it doesn't eat up memory, you type in the terminal ctrl + C and then say Y for yes.

___________________________________________________________________________________________________________________________________________
Grunt and browserify(allows project to become modular meaning you're not required to import or link each file to your html (example no needto
link css stylesheet or js script to html)
Modules are file sections of your application that contains bundle of your js files into 1 destination instead of having many js files
referenced in your html.

Make modules to manage files such as an apiManager module. For grunt and json servers, you use export default such as export default class apiManager
In order to import something from a js file into another js file, you need to import then export.
Exporting and importing.
Fetch function returns a promise so no need to put new Promise. Just use .then

First: make an apiManager.js file module and make it in modularity with the main.js by making a class with constructor in the apiManager.js
and export default class with 2 functions in it. Then link to main.js to import it there.
You export in apiManager.js and you import in main.js

When exporting a function, you just use export, but when exporting a class, you use export default.
When importing a function you have to put curly braces, and within you put the name of the function, 
if its a class you just say import nameOfClass from './pathOfFile'

___________________________________________________________________________________________________________________________________________

Regular fetch calls (return fetch) only gets data. The api calls you do in the apiManager.js needs to also coincide with the main.js to specify
which information you want as an object;

For a post call, it allows you to add  data to the database.json and include in dom to be seen. Post calls need a method to specify what type
of call you're doing and needs a headers (Content-Type: application/json) and body (JSON.stringify(data) parameter). post needs a parameter in the
function that is in the body parameter for stringify. When doing a post api call and in the main.js you create a variable and put your object info
the id automatically gets created.

Delete calls

Edit Calls (Put and Patch)


